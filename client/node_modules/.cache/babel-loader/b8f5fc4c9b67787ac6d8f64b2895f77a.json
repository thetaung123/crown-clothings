{"ast":null,"code":"import _defineProperty from \"/home/maxwell/Desktop/crown-clothings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCwyHQFh0fhhnmS-RHhYhrfQLbuN--yq3E\",\n  authDomain: \"crown-db-38284.firebaseapp.com\",\n  databaseURL: \"https://crown-db-38284.firebaseio.com\",\n  projectId: \"crown-db-38284\",\n  storageBucket: \"crown-db-38284.appspot.com\",\n  messagingSenderId: \"282105219809\",\n  appId: \"1:282105219809:web:53736acaac824bf33145a0\",\n  measurementId: \"G-9R9FJ5PEL4\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid)); //we're gonna use uid as id\n\n  const snapShot = await userRef.get(); //when you use get method you get back a snapShot Doc. //checking if the user exists\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date(); //if the user doesn't exit, this'll create a new user\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  //for was created for adding shop data into firebase\n  const collectionRef = firestore.collection(collectionKey); //finding collectionRef in firestore\n\n  const batch = firestore.batch(); //normally we can't request multiple set request at the same time, so, we need to use batch property\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //creating collectionRef with random id firestore gives\n\n    batch.set(newDocRef, obj);\n  });\n  await batch.commit(); //committing our created collection\n};\n\nconst convertCollectionSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI\n    };\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/maxwell/Desktop/crown-clothings/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapshotToMap","collections","transformedCollections","docs","map","data","title","items","routeName","encodeURI","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,gCAFD;AAGXC,EAAAA,WAAW,EAAE,uCAHF;AAIXC,EAAAA,SAAS,EAAE,gBAJA;AAKXC,EAAAA,aAAa,EAAE,4BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAGA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,iBAAuBJ,QAAQ,CAACK,GAAhC,EAAhB,CAHyE,CAGjB;;AACxD,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAJyE,CAInC;;AAEtC,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AAAA,UACTC,WADS,GACaT,QADb,CACTS,WADS;AAAA,UACIC,KADJ,GACaV,QADb,CACIU,KADJ;AAEhB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB,CAFgB,CAGhB;;AACA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR;AACFJ,QAAAA,WADE;AAEFC,QAAAA,KAFE;AAGFC,QAAAA;AAHE,SAICV,cAJD,EAAN;AAMH,KAPD,CAOC,OAAOa,KAAP,EAAc;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCF,KAAK,CAACG,OAAxC;AACH;AACJ;;AACD,SAAOf,OAAP;AACH,CAtBM;AAwBP,OAAO,MAAMgB,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAuC;AAAE;AAChF,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB,CAD8E,CACnB;;AAE3D,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd,CAH8E,CAG7C;;AAEjCH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB,CADwB,CACe;;AACvCmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAqBD,GAArB;AACH,GAHD;AAIE,QAAMF,KAAK,CAACI,MAAN,EAAN,CAT4E,CAStD;AAEzB,CAXM;;AAaP,MAAMC,8BAA8B,GAAIC,WAAD,IAAiB;AACtD,QAAMC,sBAAsB,GAAID,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAqB5B,GAAG,IAAI;AAAA,sBACjCA,GAAG,CAAC6B,IAAJ,EADiC;AAAA,UACjDC,KADiD,aACjDA,KADiD;AAAA,UAC1CC,KAD0C,aAC1CA,KAD0C;;AAExD,WAAO;AACHC,MAAAA,SAAS,EAAEC;AADR,KAAP;AAGH,GAL+B,CAAhC;AAMD,CAPD;;AASA,OAAO,MAAMC,IAAI,GAAGlD,QAAQ,CAACkD,IAAT,EAAb;AACP,OAAO,MAAMnC,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAMoC,QAAQ,GAAG,IAAInD,QAAQ,CAACkD,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAenD,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyCwyHQFh0fhhnmS-RHhYhrfQLbuN--yq3E\",\n    authDomain: \"crown-db-38284.firebaseapp.com\",\n    databaseURL: \"https://crown-db-38284.firebaseio.com\",\n    projectId: \"crown-db-38284\",\n    storageBucket: \"crown-db-38284.appspot.com\",\n    messagingSenderId: \"282105219809\",\n    appId: \"1:282105219809:web:53736acaac824bf33145a0\",\n    measurementId: \"G-9R9FJ5PEL4\"\n};\n\nfirebase.initializeApp(config);\n\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if(!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`); //we're gonna use uid as id\n    const snapShot = await userRef.get(); //when you use get method you get back a snapShot Doc. //checking if the user exists\n\n    if(!snapShot.exists){\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n        //if the user doesn't exit, this'll create a new user\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        }catch (error) {\n            console.log('error creating user',error.message);\n        }\n    }\n    return userRef;\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => { //for was created for adding shop data into firebase\n  const collectionRef = firestore.collection(collectionKey); //finding collectionRef in firestore\n\n  const batch = firestore.batch(); //normally we can't request multiple set request at the same time, so, we need to use batch property\n\n  objectsToAdd.forEach(obj => {\n      const newDocRef = collectionRef.doc(); //creating collectionRef with random id firestore gives\n      batch.set(newDocRef, obj);\n  });\n    await batch.commit(); //committing our created collection\n\n};\n\nconst convertCollectionSnapshotToMap = (collections) => {\n  const transformedCollections =  collections.docs.map(doc => {\n      const {title, items} = doc.data();\n      return {\n          routeName: encodeURI\n      }\n  })\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}