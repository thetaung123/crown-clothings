{"ast":null,"code":"var _jsxFileName = \"/home/maxwell/Desktop/crown-clothings/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport CollectionPageContainer from \"../collection/collection.container\";\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const fetchCollectionsStart = this.props.fetchCollectionsStart;\n    fetchCollectionsStart(); //using redux-thunk //this is async request\n  }\n\n  render() {\n    const match = this.props.match; //one of the three props Route passed into ShopPage in App.js\n\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      component: CollectionsOverviewContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      component: CollectionPageContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  //with thunk\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart()) //*******\n\n}); // const mapDispatchToProps = dispatch => ({//with thunk\n//     fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()) //*******\n// });\n\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/maxwell/Desktop/crown-clothings/src/pages/shop/shop.component.jsx"],"names":["React","Route","CollectionsOverviewContainer","CollectionPageContainer","connect","fetchCollectionsStart","ShopPage","Component","componentDidMount","props","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,QAAsC,+BAAtC;;AAEA,MAAOC,QAAP,SAAwBN,KAAK,CAACO,SAA9B,CAAuC;AAEnCC,EAAAA,iBAAiB,GAAG;AAAA,UACRH,qBADQ,GACkB,KAAKI,KADvB,CACRJ,qBADQ;AAEhBA,IAAAA,qBAAqB,GAFL,CAES;AAC5B;;AAEDK,EAAAA,MAAM,GAAG;AAAA,UACGC,KADH,GACa,KAAKF,KADlB,CACGE,KADH,EACyB;;AAC9B,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,YAAKA,KAAK,CAACC,IAAX,CAAjB;AACO,MAAA,SAAS,EAAEV,4BADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAMI,oBAAC,KAAD;AAAO,MAAA,IAAI,YAAKS,KAAK,CAACC,IAAX,mBAAX;AACO,MAAA,SAAS,EAAET,uBADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAWH;;AApBkC;;AAsBvC,MAAMU,kBAAkB,GAAGC,QAAQ,KAAK;AAAC;AACrCT,EAAAA,qBAAqB,EAAE,MAAMS,QAAQ,CAACT,qBAAqB,EAAtB,CADD,CAC2B;;AAD3B,CAAL,CAAnC,C,CAIA;AACA;AACA;;;AAEA,eAAeD,OAAO,CAAC,IAAD,EAAOS,kBAAP,CAAP,CAAkCP,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport CollectionPageContainer from \"../collection/collection.container\";\n\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\n\nclass  ShopPage extends React.Component{\n\n    componentDidMount() {\n        const { fetchCollectionsStart } = this.props;\n        fetchCollectionsStart(); //using redux-thunk //this is async request\n    }\n\n    render() {\n        const { match } = this.props; //one of the three props Route passed into ShopPage in App.js\n        return(\n            <div className='shop-page'>\n                <Route exact path={`${match.path}`}\n                       component={CollectionsOverviewContainer} />\n                {/*<Route path={`${match.path}/:collectionId`}*/}\n                {/*       render={(props) => <CollectionPageWithSpinner //this doesn't work with isCollectionFetching because the value we get for that is async request inside of componentdidmount which runs after render method, so, the state of fetching is only updated after we rendered the components,so, the loading doesn't appear*/}\n                {/*           isLoading={!isCollectionsLoaded} {...props} /> }/> /!*if we want to make the url varying we don't want to make Route of ShopPage *exact* *!/*/}\n                <Route path={`${match.path}/:collectionId`}\n                       component={CollectionPageContainer} />\n            </div>\n        )\n    }\n}\nconst mapDispatchToProps = dispatch => ({//with thunk\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart()) //*******\n});\n\n// const mapDispatchToProps = dispatch => ({//with thunk\n//     fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()) //*******\n// });\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}