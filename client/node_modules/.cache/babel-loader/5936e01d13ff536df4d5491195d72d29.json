{"ast":null,"code":"var _jsxFileName = \"/home/maxwell/Desktop/crown-clothings/src/App.js\";\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from \"reselect\";\nimport './App.scss';\nimport Homepage from \"./pages/homepage/Homepage.components\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\nimport Header from \"./components/header/header.component\";\nimport { selectCurrentUser, selectIsFetching } from \"./redux/user/user.selectors\";\nimport { checkUserSession } from \"./redux/user/user.actions\";\nimport SignUpAndSignInPageContainer from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.container\";\nimport WithSpinner from \"./components/with-spinner/with-spinner.component\"; //import {setCurrentUser} from \"./redux/user/user.actions\";\n\nclass App extends React.Component {\n  //unSubscribeFromAuth = null;\n  componentDidMount() {\n    const checkUserSession = this.props.checkUserSession;\n    checkUserSession();\n  } // componentWillUnmount() {\n  //     this.unSubscribeFromAuth(); //to prevent memory leaks// when we unmount our app, we want to clear auth // this is not equal to signOut\n  //\n  //\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \" \", React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: Homepage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }) : React.createElement(SignUpAndSignInPageContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), \" \"));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  //const mapStateToProps = ({user}) => ({ //destructuring the state\n  currentUser: selectCurrentUser,\n  isLoading: selectIsFetching //making the props name isLoading is important for using it with WithSpinner\n  //collectionsArray: selectCollectionsForPreview\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // setCurrentUser: user => dispatch(setCurrentUser(user)) //setCurrentUser receives a user // if you change the name of the property of the object mapDispatchToProps returning, it'll still work //eg. a: user => dispatch(setCurrentUser(user)) // but you'll receive a prop called 'a' now\n  checkUserSession: () => dispatch(checkUserSession())\n});\n\nconst AppWithSpinner = WithSpinner(App);\nexport default connect(mapStateToProps, mapDispatchToProps)(AppWithSpinner); //by doing this App.js receives a prop call setCurrentUser\n//connect accepts to arguments: mapStateToProps and mapDispatchToProps // mapStateToProps is for the components that need the value of the state // Dispatch is for components that need to change the state but don't use it","map":{"version":3,"sources":["/home/maxwell/Desktop/crown-clothings/src/App.js"],"names":["React","Switch","Route","Redirect","connect","createStructuredSelector","Homepage","ShopPage","CheckoutPage","Header","selectCurrentUser","selectIsFetching","checkUserSession","SignUpAndSignInPageContainer","WithSpinner","App","Component","componentDidMount","props","render","currentUser","mapStateToProps","isLoading","mapDispatchToProps","dispatch","AppWithSpinner"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAeC,KAAf,EAAsBC,QAAtB,QAAqC,kBAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAO,YAAP;AAEA,OAAOC,QAAP,MAAqB,sCAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AAEA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,SAAQC,iBAAR,EAA2BC,gBAA3B,QAAkD,6BAAlD;AAEA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,OAAOC,4BAAP,MAAyC,2DAAzC;AACA,OAAOC,WAAP,MAAwB,kDAAxB,C,CAEA;;AAEA,MAAMC,GAAN,SAAkBf,KAAK,CAACgB,SAAxB,CAAkC;AAE9B;AACAC,EAAAA,iBAAiB,GAAG;AAAA,UACRL,gBADQ,GACa,KAAKM,KADlB,CACRN,gBADQ;AAEhBA,IAAAA,gBAAgB;AACnB,GAN6B,CAQ9B;AACA;AACA;AACA;AACA;;;AAEAO,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEb,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,WAAlB;AAA8B,MAAA,SAAS,EAAEE,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAED,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,SAAlB;AAA4B,MAAA,MAAM,EAAE,MAAM,KAAKW,KAAL,CAAWE,WAAX,GACrC,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADqC,GACd,oBAAC,4BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,MAFJ,CADJ;AAYH;;AA3B6B;;AA8BlC,MAAMC,eAAe,GAAGhB,wBAAwB,CAAC;AAAE;AAC/Ce,EAAAA,WAAW,EAAEV,iBADgC;AAE7CY,EAAAA,SAAS,EAAEX,gBAFkC,CAEjB;AAC5B;;AAH6C,CAAD,CAAhD;;AAMA,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACrC;AACCZ,EAAAA,gBAAgB,EAAE,MAAMY,QAAQ,CAACZ,gBAAgB,EAAjB;AAFI,CAAL,CAAnC;;AAKA,MAAMa,cAAc,GAAGX,WAAW,CAACC,GAAD,CAAlC;AAEA,eAAeX,OAAO,CAACiB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CE,cAA7C,CAAf,C,CAA6E;AAC7E","sourcesContent":["import React from 'react';\nimport {Switch,Route, Redirect} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from \"reselect\";\n\nimport './App.scss';\n\nimport Homepage from \"./pages/homepage/Homepage.components\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\n\nimport Header from \"./components/header/header.component\";\nimport {selectCurrentUser, selectIsFetching} from \"./redux/user/user.selectors\";\n\nimport { checkUserSession } from \"./redux/user/user.actions\";\nimport SignUpAndSignInPageContainer from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.container\";\nimport WithSpinner from \"./components/with-spinner/with-spinner.component\";\n\n//import {setCurrentUser} from \"./redux/user/user.actions\";\n\nclass App extends React.Component {\n\n    //unSubscribeFromAuth = null;\n    componentDidMount() {\n        const { checkUserSession } = this.props;\n        checkUserSession();\n    }\n\n    // componentWillUnmount() {\n    //     this.unSubscribeFromAuth(); //to prevent memory leaks// when we unmount our app, we want to clear auth // this is not equal to signOut\n    //\n    //\n    // }\n\n    render() {\n        return (\n            <div>\n                <Header />\n                <Switch> {/*switch render the first component the path matches and ignore the rest */}\n                    <Route exact path='/' component={Homepage}/>\n                    <Route exact path='/checkout' component={CheckoutPage}/>\n                    <Route path='/shop' component={ShopPage}/>\n                    <Route exact path='/signin' render={() => this.props.currentUser ?\n                        (<Redirect to='/'/>) : (<SignUpAndSignInPageContainer/>) }/> {/*if the user is signedIn we are redirecting to the homepage*/}\n                </Switch>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({ //const mapStateToProps = ({user}) => ({ //destructuring the state\n    currentUser: selectCurrentUser,\n    isLoading: selectIsFetching //making the props name isLoading is important for using it with WithSpinner\n    //collectionsArray: selectCollectionsForPreview\n});\n\nconst mapDispatchToProps = dispatch => ({\n   // setCurrentUser: user => dispatch(setCurrentUser(user)) //setCurrentUser receives a user // if you change the name of the property of the object mapDispatchToProps returning, it'll still work //eg. a: user => dispatch(setCurrentUser(user)) // but you'll receive a prop called 'a' now\n    checkUserSession: () => dispatch(checkUserSession())\n});\n\nconst AppWithSpinner = WithSpinner(App);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppWithSpinner); //by doing this App.js receives a prop call setCurrentUser\n//connect accepts to arguments: mapStateToProps and mapDispatchToProps // mapStateToProps is for the components that need the value of the state // Dispatch is for components that need to change the state but don't use it\n"]},"metadata":{},"sourceType":"module"}