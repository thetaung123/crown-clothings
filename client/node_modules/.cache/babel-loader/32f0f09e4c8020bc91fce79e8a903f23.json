{"ast":null,"code":"var _jsxFileName = \"/home/maxwell/Desktop/crown-clothings/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from \"reselect\";\nimport { selectIsCollectionFetching, isCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview); //withSpinner will return modified component// that's what HOC are for\n\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // state = { //we don't need to call constructor, if we do it like this.\n  //     loading: true\n  // };\n  // unSubscribeFromSnapshot = null;\n  componentDidMount() {\n    const fetchCollectionsStartAsync = this.props.fetchCollectionsStartAsync;\n    fetchCollectionsStartAsync(); //using redux-thunk //this is async request\n    //const {updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collections');\n    //\n    // // collectionRef.onSnapshot(async snapshot => { //this is using observable pattern\n    // //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    // //     updateCollections(collectionMap);\n    // //     this.setState({loading: false})\n    // // })\n    // collectionRef.get().then(snapshot => {\n    //         const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    //         updateCollections(collectionMap);\n    //         this.setState({loading: false})\n    //     });\n  }\n\n  render() {\n    const _this$props = this.props,\n          match = _this$props.match,\n          isCollectionFetching = _this$props.isCollectionFetching,\n          isCollectionsLoaded = _this$props.isCollectionsLoaded; //one of the three props Route passed into ShopPage in App.js\n\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      render: props => React.createElement(CollectionPageWithSpinner //this doesn't work with isCollectionFetching because the value we get for that is async request inside of componentdidmount which runs after render method, so, the state of fetching is only updated after we rendered the components,so, the loading doesn't appear\n      , Object.assign({\n        isLoading: !isCollectionsLoaded\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), \" \");\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: isCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/maxwell/Desktop/crown-clothings/src/pages/shop/shop.component.jsx"],"names":["React","Route","createStructuredSelector","selectIsCollectionFetching","isCollectionsLoaded","CollectionsOverview","CollectionPage","WithSpinner","connect","fetchCollectionsStartAsync","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,0BAAT,EAAoCC,mBAApC,QAA8D,iCAA9D;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AAEA,MAAMC,8BAA8B,GAAGH,WAAW,CAACF,mBAAD,CAAlD,C,CAAyE;;AACzE,MAAMM,yBAAyB,GAAGJ,WAAW,CAACD,cAAD,CAA7C;;AAEA,MAAOM,QAAP,SAAwBZ,KAAK,CAACa,SAA9B,CAAuC;AAEnC;AACA;AACA;AAGA;AAEAC,EAAAA,iBAAiB,GAAG;AAAA,UACRL,0BADQ,GACuB,KAAKM,KAD5B,CACRN,0BADQ;AAEhBA,IAAAA,0BAA0B,GAFV,CAEc;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDO,EAAAA,MAAM,GAAG;AAAA,wBACwD,KAAKD,KAD7D;AAAA,UACGE,KADH,eACGA,KADH;AAAA,UACUC,oBADV,eACUA,oBADV;AAAA,UACgCd,mBADhC,eACgCA,mBADhC,EACoE;;AACzE,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,YAAKa,KAAK,CAACE,IAAX,CAAjB;AACO,MAAA,MAAM,EAAGJ,KAAD,IAAW,oBAAC,8BAAD;AACf,QAAA,SAAS,EAAEG;AADI,SACsBH,KADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAII,oBAAC,KAAD;AAAO,MAAA,IAAI,YAAKE,KAAK,CAACE,IAAX,mBAAX;AACO,MAAA,MAAM,EAAGJ,KAAD,IAAW,oBAAC,yBAAD,CAA2B;AAA3B;AACf,QAAA,SAAS,EAAE,CAACX;AADG,SACsBW,KADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,MADJ;AAUH;;AAxCkC;;AA6CvC,MAAMK,eAAe,GAAGlB,wBAAwB,CAAC;AAC7CgB,EAAAA,oBAAoB,EAAEf,0BADuB;AAE7CC,EAAAA,mBAAmB,EAAEA;AAFwB,CAAD,CAAhD;;AAKA,MAAMiB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCb,EAAAA,0BAA0B,EAAE,MAAMa,QAAQ,CAACb,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAIA,eAAeD,OAAO,CAACY,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,QAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from \"reselect\";\nimport { selectIsCollectionFetching,isCollectionsLoaded} from \"../../redux/shop/shop.selectors\";\n\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview); //withSpinner will return modified component// that's what HOC are for\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass  ShopPage extends React.Component{\n\n    // state = { //we don't need to call constructor, if we do it like this.\n    //     loading: true\n    // };\n\n\n    // unSubscribeFromSnapshot = null;\n\n    componentDidMount() {\n        const { fetchCollectionsStartAsync } = this.props;\n        fetchCollectionsStartAsync(); //using redux-thunk //this is async request\n\n        //const {updateCollections } = this.props;\n        // const collectionRef = firestore.collection('collections');\n        //\n        // // collectionRef.onSnapshot(async snapshot => { //this is using observable pattern\n        // //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n        // //     updateCollections(collectionMap);\n        // //     this.setState({loading: false})\n        // // })\n        // collectionRef.get().then(snapshot => {\n        //         const collectionMap = convertCollectionSnapshotToMap(snapshot);\n        //         updateCollections(collectionMap);\n        //         this.setState({loading: false})\n        //     });\n    }\n\n    render() {\n        const { match, isCollectionFetching, isCollectionsLoaded } = this.props; //one of the three props Route passed into ShopPage in App.js\n        return(\n            <div className='shop-page'>\n                <Route exact path={`${match.path}`}\n                       render={(props) => <CollectionsOverviewWithSpinner\n                           isLoading={isCollectionFetching} {...props} />} />\n                <Route path={`${match.path}/:collectionId`}\n                       render={(props) => <CollectionPageWithSpinner //this doesn't work with isCollectionFetching because the value we get for that is async request inside of componentdidmount which runs after render method, so, the state of fetching is only updated after we rendered the components,so, the loading doesn't appear\n                           isLoading={!isCollectionsLoaded} {...props} /> }/> {/*if we want to make the url varying we don't want to make Route of ShopPage *exact* */}\n            </div>\n        )\n    }\n\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n    isCollectionFetching: selectIsCollectionFetching,\n    isCollectionsLoaded: isCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}