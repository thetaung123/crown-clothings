{"ast":null,"code":"import React,{useEffect}from'react';import{Route}from'react-router-dom';import CollectionsOverviewContainer from\"../../components/collections-overview/collections-overview.container\";import CollectionPageContainer from\"../collection/collection.container\";import{connect}from'react-redux';import{fetchCollectionsStart as _fetchCollectionsStart}from\"../../redux/shop/shop.actions\";var ShopPage=function ShopPage(_ref){var match=_ref.match,fetchCollectionsStart=_ref.fetchCollectionsStart;// componentDidMount() {\n//     const { fetchCollectionsStartAsync } = this.props;\n//     fetchCollectionsStartAsync(); //using redux-thunk //this is async request\n// }\nuseEffect(function(){fetchCollectionsStart();//using redux-saga\n},[fetchCollectionsStart]);//same argument as in the App\n//const { match } = this.props; //one of the three props Route passed into ShopPage in App.js\nreturn React.createElement(\"div\",{className:\"shop-page\"},React.createElement(Route,{exact:true,path:\"\".concat(match.path),component:CollectionsOverviewContainer}),React.createElement(Route,{path:\"\".concat(match.path,\"/:collectionId\"),component:CollectionPageContainer}));};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{//with saga\nfetchCollectionsStart:function fetchCollectionsStart(){return dispatch(_fetchCollectionsStart());}//*******\n};};// const mapDispatchToProps = dispatch => ({//with thunk\n//     fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()) //*******\n// });\nexport default connect(null,mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/maxwell/Desktop/crown-clothings/client/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","Route","CollectionsOverviewContainer","CollectionPageContainer","connect","fetchCollectionsStart","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,KAAT,KAAsB,kBAAtB,CAEA,MAAOC,CAAAA,4BAAP,KAAyC,sEAAzC,CACA,MAAOC,CAAAA,uBAAP,KAAoC,oCAApC,CAEA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,qBAAqB,GAArBA,CAAAA,sBAAT,KAAsC,+BAAtC,CAEA,GAAOC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAoC,IAAlCC,CAAAA,KAAkC,MAAlCA,KAAkC,CAA3BF,qBAA2B,MAA3BA,qBAA2B,CAElD;AACA;AACA;AACA;AACAL,SAAS,CAAC,UAAM,CACZK,qBAAqB,GAAI;AAC5B,CAFQ,CAEN,CAACA,qBAAD,CAFM,CAAT,CAE6B;AAE7B;AACA,MACI,4BAAK,SAAS,CAAC,WAAf,EACI,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,WAAKE,KAAK,CAACC,IAAX,CAAjB,CACO,SAAS,CAAEN,4BADlB,EADJ,CAMI,oBAAC,KAAD,EAAO,IAAI,WAAKK,KAAK,CAACC,IAAX,kBAAX,CACO,SAAS,CAAEL,uBADlB,EANJ,CADJ,CAWH,CAtBD,CAuBA,GAAMM,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CAAC;AACrCL,qBAAqB,CAAE,uCAAMK,CAAAA,QAAQ,CAACL,sBAAqB,EAAtB,CAAd,EAAwC;AAD3B,CAAL,EAAnC,CAIA;AACA;AACA;AAEA,cAAeD,CAAAA,OAAO,CAAC,IAAD,CAAOK,kBAAP,CAAP,CAAkCH,QAAlC,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { Route } from 'react-router-dom';\n\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport CollectionPageContainer from \"../collection/collection.container\";\n\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\n\nconst  ShopPage = ({match, fetchCollectionsStart}) => {\n\n    // componentDidMount() {\n    //     const { fetchCollectionsStartAsync } = this.props;\n    //     fetchCollectionsStartAsync(); //using redux-thunk //this is async request\n    // }\n    useEffect(() => {\n        fetchCollectionsStart(); //using redux-saga\n    }, [fetchCollectionsStart]); //same argument as in the App\n\n    //const { match } = this.props; //one of the three props Route passed into ShopPage in App.js\n    return(\n        <div className='shop-page'>\n            <Route exact path={`${match.path}`}\n                   component={CollectionsOverviewContainer} />\n            {/*<Route path={`${match.path}/:collectionId`}*/}\n            {/*       render={(props) => <CollectionPageWithSpinner //this doesn't work with isCollectionFetching because the value we get for that is async request inside of componentdidmount which runs after render method, so, the state of fetching is only updated after we rendered the components,so, the loading doesn't appear*/}\n            {/*           isLoading={!isCollectionsLoaded} {...props} /> }/> /!*if we want to make the url varying we don't want to make Route of ShopPage *exact* *!/*/}\n            <Route path={`${match.path}/:collectionId`}\n                   component={CollectionPageContainer} />\n        </div>\n    )\n};\nconst mapDispatchToProps = dispatch => ({//with saga\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart()) //*******\n});\n\n// const mapDispatchToProps = dispatch => ({//with thunk\n//     fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()) //*******\n// });\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}