{"ast":null,"code":"import React,{useEffect}from'react';import{Switch,Route,Redirect}from'react-router-dom';import{connect}from'react-redux';import{createStructuredSelector}from\"reselect\";import'./App.scss';import Homepage from\"./pages/homepage/Homepage.components\";import ShopPage from\"./pages/shop/shop.component\";import CheckoutPage from\"./pages/checkout/checkout.component\";import Header from\"./components/header/header.component\";import{selectCurrentUser}from\"./redux/user/user.selectors\";import{checkUserSession as _checkUserSession}from\"./redux/user/user.actions\";import SignUpAndSignInPageContainer from\"./pages/sign-in-and-sign-up/sign-in-and-sign-up.container\";var App=function App(_ref){var checkUserSession=_ref.checkUserSession,currentUser=_ref.currentUser;//using hooks\nuseEffect(function(){checkUserSession();//checkUserSession is a prop ,so, it's not gonna change\n},[checkUserSession]);//if we leave it empty, when the user is already signed in the components will re-render again,so, useEffect will run second time\nreturn React.createElement(\"div\",null,React.createElement(Header,null),React.createElement(Switch,null,\" \",React.createElement(Route,{exact:true,path:\"/\",component:Homepage}),React.createElement(Route,{exact:true,path:\"/checkout\",component:CheckoutPage}),React.createElement(Route,{path:\"/shop\",component:ShopPage}),React.createElement(Route,{exact:true,path:\"/signin\",render:function render(){return currentUser?React.createElement(Redirect,{to:\"/\"}):React.createElement(SignUpAndSignInPageContainer,null);}}),\" \"));};var mapStateToProps=createStructuredSelector({//const mapStateToProps = ({user}) => ({ //destructuring the state\ncurrentUser:selectCurrentUser//collectionsArray: selectCollectionsForPreview\n});var mapDispatchToProps=function mapDispatchToProps(dispatch){return{// setCurrentUser: user => dispatch(setCurrentUser(user)) //setCurrentUser receives a user // if you change the name of the property of the object mapDispatchToProps returning, it'll still work //eg. a: user => dispatch(setCurrentUser(user)) // but you'll receive a prop called 'a' now\ncheckUserSession:function checkUserSession(){return dispatch(_checkUserSession());}};};export default connect(mapStateToProps,mapDispatchToProps)(App);//by doing this App.js receives a prop call setCurrentUser\n//connect accepts to arguments: mapStateToProps and mapDispatchToProps // mapStateToProps is for the components that need the value of the state // Dispatch is for components that need to change the state but don't use it","map":{"version":3,"sources":["/home/maxwell/Desktop/crown-clothings/client/src/App.js"],"names":["React","useEffect","Switch","Route","Redirect","connect","createStructuredSelector","Homepage","ShopPage","CheckoutPage","Header","selectCurrentUser","checkUserSession","SignUpAndSignInPageContainer","App","currentUser","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,OAAQC,MAAR,CAAeC,KAAf,CAAsBC,QAAtB,KAAqC,kBAArC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,wBAAT,KAAyC,UAAzC,CAEA,MAAO,YAAP,CAEA,MAAOC,CAAAA,QAAP,KAAqB,sCAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,6BAArB,CACA,MAAOC,CAAAA,YAAP,KAAyB,qCAAzB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,sCAAnB,CACA,OAAQC,iBAAR,KAAgC,6BAAhC,CAEA,OAASC,gBAAgB,GAAhBA,CAAAA,iBAAT,KAAiC,2BAAjC,CACA,MAAOC,CAAAA,4BAAP,KAAyC,2DAAzC,CAGA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,MAAqC,IAAnCF,CAAAA,gBAAmC,MAAnCA,gBAAmC,CAAjBG,WAAiB,MAAjBA,WAAiB,CAAC;AAE9Cd,SAAS,CAAC,UAAM,CACZW,gBAAgB,GAAG;AACtB,CAFQ,CAEN,CAACA,gBAAD,CAFM,CAAT,CAEwB;AAExB,MACI,gCACI,oBAAC,MAAD,MADJ,CAEI,oBAAC,MAAD,UACI,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,GAAlB,CAAsB,SAAS,CAAEL,QAAjC,EADJ,CAEI,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,WAAlB,CAA8B,SAAS,CAAEE,YAAzC,EAFJ,CAGI,oBAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,SAAS,CAAED,QAA/B,EAHJ,CAII,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,SAAlB,CAA4B,MAAM,CAAE,wBAAMO,CAAAA,WAAW,CAChD,oBAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EADgD,CACzB,oBAAC,4BAAD,MADQ,EAApC,EAJJ,KAFJ,CADJ,CAYH,CAlBD,CAoBA,GAAMC,CAAAA,eAAe,CAAGV,wBAAwB,CAAC,CAAE;AAC/CS,WAAW,CAAEJ,iBACb;AAF6C,CAAD,CAAhD,CAKA,GAAMM,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACrC;AACCN,gBAAgB,CAAE,kCAAMM,CAAAA,QAAQ,CAACN,iBAAgB,EAAjB,CAAd,EAFkB,CAAL,EAAnC,CAKA,cAAeP,CAAAA,OAAO,CAACW,eAAD,CAAkBC,kBAAlB,CAAP,CAA6CH,GAA7C,CAAf,CAAkE;AAClE","sourcesContent":["import React, {useEffect} from 'react';\nimport {Switch,Route, Redirect} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from \"reselect\";\n\nimport './App.scss';\n\nimport Homepage from \"./pages/homepage/Homepage.components\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\n\nimport Header from \"./components/header/header.component\";\nimport {selectCurrentUser} from \"./redux/user/user.selectors\";\n\nimport { checkUserSession } from \"./redux/user/user.actions\";\nimport SignUpAndSignInPageContainer from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.container\";\n\n\nconst App = ({checkUserSession, currentUser}) => {//using hooks\n\n    useEffect(() => {\n        checkUserSession();//checkUserSession is a prop ,so, it's not gonna change\n    }, [checkUserSession]); //if we leave it empty, when the user is already signed in the components will re-render again,so, useEffect will run second time\n\n    return (\n        <div>\n            <Header />\n            <Switch> {/*switch render the first component the path matches and ignore the rest */}\n                <Route exact path='/' component={Homepage}/>\n                <Route exact path='/checkout' component={CheckoutPage}/>\n                <Route path='/shop' component={ShopPage}/>\n                <Route exact path='/signin' render={() => currentUser ?\n                    (<Redirect to='/'/>) : (<SignUpAndSignInPageContainer/>) }/> {/*if the user is signedIn we are redirecting to the homepage*/}\n            </Switch>\n        </div>\n    );\n};\n\nconst mapStateToProps = createStructuredSelector({ //const mapStateToProps = ({user}) => ({ //destructuring the state\n    currentUser: selectCurrentUser\n    //collectionsArray: selectCollectionsForPreview\n});\n\nconst mapDispatchToProps = dispatch => ({\n   // setCurrentUser: user => dispatch(setCurrentUser(user)) //setCurrentUser receives a user // if you change the name of the property of the object mapDispatchToProps returning, it'll still work //eg. a: user => dispatch(setCurrentUser(user)) // but you'll receive a prop called 'a' now\n    checkUserSession: () => dispatch(checkUserSession())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); //by doing this App.js receives a prop call setCurrentUser\n//connect accepts to arguments: mapStateToProps and mapDispatchToProps // mapStateToProps is for the components that need the value of the state // Dispatch is for components that need to change the state but don't use it\n"]},"metadata":{},"sourceType":"module"}