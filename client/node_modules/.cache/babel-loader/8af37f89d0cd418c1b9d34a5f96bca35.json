{"ast":null,"code":"import{createStore,applyMiddleware}from\"redux\";import{persistStore}from'redux-persist';import logger from'redux-logger';//import thunk from \"redux-thunk\"; //for handling async requests\nimport createSagaMiddleware from'redux-saga';import rootSaga from\"./root-saga\";import rootReducer from'./root-reducer';var sagaMiddleware=createSagaMiddleware();// const middlewares = [thunk]; //using thunk\nvar middlewares=[sagaMiddleware];if(process.env.NODE_ENV==='development'){//to hide the middleware in production //environmental variable node set up which only has 3 possible values ('development', 'production', and 'test')\nmiddlewares.push(logger);//when we do npm run build it changes into 'production'\n}export var store=createStore(rootReducer,applyMiddleware.apply(void 0,middlewares));//*** it has to be here // after creating store\n//sagaMiddleware.run(fetchCollectionsStart); //every sagas we want to run in components also has to go through here // this is not the same as the function we wrote in shop.actions file// it was for using inside components\n//instead of doing like above\nsagaMiddleware.run(rootSaga);//this contains every sagas we want to run\nexport var persistor=persistStore(store);","map":{"version":3,"sources":["/home/maxwell/Desktop/crown-clothings/client/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","createSagaMiddleware","rootSaga","rootReducer","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA4C,OAA5C,CACA,OAASC,YAAT,KAA6B,eAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA;AACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CAEA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CAEA,GAAMC,CAAAA,cAAc,CAAGH,oBAAoB,EAA3C,CAEA;AACA,GAAMI,CAAAA,WAAW,CAAG,CAACD,cAAD,CAApB,CAEA,GAAGE,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,aAA5B,CAA2C,CAAE;AACzCH,WAAW,CAACI,IAAZ,CAAiBT,MAAjB,EAAwC;AAC3C,CAED,MAAO,IAAMU,CAAAA,KAAK,CAAGb,WAAW,CAACM,WAAD,CAAcL,eAAe,MAAf,QAAmBO,WAAnB,CAAd,CAAzB,CACP;AACA;AACA;AACAD,cAAc,CAACO,GAAf,CAAmBT,QAAnB,EAA8B;AAG9B,MAAO,IAAMU,CAAAA,SAAS,CAAGb,YAAY,CAACW,KAAD,CAA9B","sourcesContent":["import { createStore, applyMiddleware} from \"redux\";\nimport { persistStore } from 'redux-persist';\nimport logger from 'redux-logger';\n//import thunk from \"redux-thunk\"; //for handling async requests\nimport createSagaMiddleware from 'redux-saga'\n\nimport rootSaga from \"./root-saga\";\nimport rootReducer from './root-reducer';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// const middlewares = [thunk]; //using thunk\nconst middlewares = [sagaMiddleware];\n\nif(process.env.NODE_ENV === 'development') { //to hide the middleware in production //environmental variable node set up which only has 3 possible values ('development', 'production', and 'test')\n    middlewares.push(logger);               //when we do npm run build it changes into 'production'\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n//*** it has to be here // after creating store\n//sagaMiddleware.run(fetchCollectionsStart); //every sagas we want to run in components also has to go through here // this is not the same as the function we wrote in shop.actions file// it was for using inside components\n//instead of doing like above\nsagaMiddleware.run(rootSaga); //this contains every sagas we want to run\n\n\nexport const persistor = persistStore(store);"]},"metadata":{},"sourceType":"module"}