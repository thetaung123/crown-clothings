{"ast":null,"code":"var _jsxFileName = \"/home/maxwell/Desktop/crown-clothings/src/App.js\";\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from \"reselect\";\nimport './App.scss';\nimport Homepage from \"./pages/homepage/Homepage.components\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\nimport Header from \"./components/header/header.component\";\nimport SignUpAndSignInPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\nimport { selectCurrentUser } from \"./redux/user/user.selectors\"; //import {setCurrentUser} from \"./redux/user/user.actions\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unSubscribeFromAuth = null;\n  }\n\n  componentDidMount() {//const {setCurrentUser} = this.props; // be sure to use setCurrentUser from props not imported setCurrentUser\n    // this.unSubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n    //     if (userAuth){\n    //         const userRef = await createUserProfileDocument(userAuth); //userRef getting back by sending userAuth from createUserProfileDocument method we created which is all the information of the user logged in\n    //\n    //         userRef.onSnapshot(snapShot => { //getting user's data\n    //             //console.log(snapShot.data()); //snapShot.data gives back all the information stored in for the user in database\n    //             setCurrentUser({\n    //                     id: snapShot.id, //id is not in the snapShot.data()\n    //                     ...snapShot.data()\n    //                 }\n    //             );\n    //             // console.log(this.state)\n    //         })\n    //     }else {\n    //         setCurrentUser(userAuth); //if the user failed to sign in userAuth is the same as null\n    //     }\n    //     // await addCollectionAndDocuments('collections',collectionsArray.map(({title, items } )=> ({title, items})))\n    // }\n    // );\n  }\n\n  componentWillUnmount() {\n    this.unSubscribeFromAuth(); //to prevent memory leaks// when we unmount our app, we want to clear auth // this is not equal to signOut\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \" \", React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: Homepage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }) : React.createElement(SignUpAndSignInPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), \" \"));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  //const mapStateToProps = ({user}) => ({ //destructuring the state\n  currentUser: selectCurrentUser //collectionsArray: selectCollectionsForPreview\n\n}); // const mapDispatchToProps = dispatch => ({\n//setCurrentUser: user => dispatch(setCurrentUser(user)) //setCurrentUser receives a user // if you change the name of the property of the object mapDispatchToProps returning, it'll still work //eg. a: user => dispatch(setCurrentUser(user)) // but you'll receive a prop called 'a' now\n// });\n\nexport default connect(mapStateToProps)(App); //by doing this App.js receives a prop call setCurrentUser\n//connect accepts to arguments: mapStateToProps and mapDispatchToProps // mapStateToProps is for the components that need the value of the state // Dispatch is for components that need to change the state but don't use it","map":{"version":3,"sources":["/home/maxwell/Desktop/crown-clothings/src/App.js"],"names":["React","Switch","Route","Redirect","connect","createStructuredSelector","Homepage","ShopPage","CheckoutPage","Header","SignUpAndSignInPage","selectCurrentUser","App","Component","unSubscribeFromAuth","componentDidMount","componentWillUnmount","render","props","currentUser","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAeC,KAAf,EAAsBC,QAAtB,QAAqC,kBAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAO,YAAP;AAEA,OAAOC,QAAP,MAAqB,sCAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AAEA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,SAAQC,iBAAR,QAAgC,6BAAhC,C,CAEA;;AAEA,MAAMC,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BC,mBAF8B,GAER,IAFQ;AAAA;;AAG9BC,EAAAA,iBAAiB,GAAG,CAChB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB,SAAKF,mBAAL,GADmB,CACS;AAG/B;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEX,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,WAAlB;AAA8B,MAAA,SAAS,EAAEE,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAED,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,SAAlB;AAA4B,MAAA,MAAM,EAAE,MAAM,KAAKW,KAAL,CAAWC,WAAX,GACrC,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADqC,GACd,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,MAFJ,CADJ;AAYH;;AA9C6B;;AAiDlC,MAAMC,eAAe,GAAGf,wBAAwB,CAAC;AAAE;AAC/Cc,EAAAA,WAAW,EAAER,iBADgC,CAE7C;;AAF6C,CAAD,CAAhD,C,CAKA;AACI;AACJ;;AAEA,eAAeP,OAAO,CAACgB,eAAD,CAAP,CAAyBR,GAAzB,CAAf,C,CAA8C;AAC9C","sourcesContent":["import React from 'react';\nimport {Switch,Route, Redirect} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from \"reselect\";\n\nimport './App.scss';\n\nimport Homepage from \"./pages/homepage/Homepage.components\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\n\nimport Header from \"./components/header/header.component\";\nimport SignUpAndSignInPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\nimport {selectCurrentUser} from \"./redux/user/user.selectors\";\n\n//import {setCurrentUser} from \"./redux/user/user.actions\";\n\nclass App extends React.Component {\n\n    unSubscribeFromAuth = null;\n    componentDidMount() {\n        //const {setCurrentUser} = this.props; // be sure to use setCurrentUser from props not imported setCurrentUser\n\n        // this.unSubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n        //     if (userAuth){\n        //         const userRef = await createUserProfileDocument(userAuth); //userRef getting back by sending userAuth from createUserProfileDocument method we created which is all the information of the user logged in\n        //\n        //         userRef.onSnapshot(snapShot => { //getting user's data\n        //             //console.log(snapShot.data()); //snapShot.data gives back all the information stored in for the user in database\n        //             setCurrentUser({\n        //                     id: snapShot.id, //id is not in the snapShot.data()\n        //                     ...snapShot.data()\n        //                 }\n        //             );\n        //             // console.log(this.state)\n        //         })\n        //     }else {\n        //         setCurrentUser(userAuth); //if the user failed to sign in userAuth is the same as null\n        //     }\n        //     // await addCollectionAndDocuments('collections',collectionsArray.map(({title, items } )=> ({title, items})))\n        // }\n        // );\n    }\n\n    componentWillUnmount() {\n        this.unSubscribeFromAuth(); //to prevent memory leaks// when we unmount our app, we want to clear auth // this is not equal to signOut\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Header />\n                <Switch> {/*switch render the first component the path matches and ignore the rest */}\n                    <Route exact path='/' component={Homepage}/>\n                    <Route exact path='/checkout' component={CheckoutPage}/>\n                    <Route path='/shop' component={ShopPage}/>\n                    <Route exact path='/signin' render={() => this.props.currentUser ?\n                        (<Redirect to='/'/>) : (<SignUpAndSignInPage/>) }/> {/*if the user is signedIn we are redirecting to the homepage*/}\n                </Switch>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({ //const mapStateToProps = ({user}) => ({ //destructuring the state\n    currentUser: selectCurrentUser\n    //collectionsArray: selectCollectionsForPreview\n});\n\n// const mapDispatchToProps = dispatch => ({\n    //setCurrentUser: user => dispatch(setCurrentUser(user)) //setCurrentUser receives a user // if you change the name of the property of the object mapDispatchToProps returning, it'll still work //eg. a: user => dispatch(setCurrentUser(user)) // but you'll receive a prop called 'a' now\n// });\n\nexport default connect(mapStateToProps)(App); //by doing this App.js receives a prop call setCurrentUser\n//connect accepts to arguments: mapStateToProps and mapDispatchToProps // mapStateToProps is for the components that need the value of the state // Dispatch is for components that need to change the state but don't use it\n"]},"metadata":{},"sourceType":"module"}