{"ast":null,"code":"import _regeneratorRuntime from\"/home/maxwell/Desktop/crown-clothings/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsAsync),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsStart),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(shopSagas);import{takeEvery,put,call,all}from'redux-saga/effects';import ShopActionTypes from\"./shop.types\";import{convertCollectionSnapshotToMap,firestore}from\"../../firebase/firebase.utils\";import{fetchCollectionsFailure,fetchCollectionsSuccess}from\"./shop.actions\";export function fetchCollectionsAsync(){var collectionRef,snapShot,collectionMap;return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;collectionRef=firestore.collection('collections');_context.next=4;return collectionRef.get();case 4:snapShot=_context.sent;_context.next=7;return call(convertCollectionSnapshotToMap,snapShot);case 7:collectionMap=_context.sent;_context.next=10;return put(fetchCollectionsSuccess(collectionMap));case 10:_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);_context.next=16;return put(fetchCollectionsFailure(_context.t0));case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,12]]);}export function fetchCollectionsStart(){return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(//takeEvery use non-blocking calls // and if an action gets fired multiple times// this run every actions //but with takeLatest, it only run the latest action and cancels the first ones// it can cancel actions because of yields\nShopActionTypes.FETCH_COLLECTIONS_START,fetchCollectionsAsync);case 2:case\"end\":return _context2.stop();}}},_marked2);}export function shopSagas(){return _regeneratorRuntime.wrap(function shopSagas$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([call(fetchCollectionsStart)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}","map":{"version":3,"sources":["/home/maxwell/Desktop/crown-clothings/client/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","shopSagas","takeEvery","put","call","all","ShopActionTypes","convertCollectionSnapshotToMap","firestore","fetchCollectionsFailure","fetchCollectionsSuccess","collectionRef","collection","get","snapShot","collectionMap","FETCH_COLLECTIONS_START"],"mappings":"4MAKiBA,qB,iDAeAC,qB,iDAOAC,S,EA3BjB,OAASC,SAAT,CAAoBC,GAApB,CAAyBC,IAAzB,CAA+BC,GAA/B,KAA0C,oBAA1C,CACA,MAAOC,CAAAA,eAAP,KAA4B,cAA5B,CACA,OAAQC,8BAAR,CAAwCC,SAAxC,KAAwD,+BAAxD,CACA,OAAQC,uBAAR,CAAiCC,uBAAjC,KAA+D,gBAA/D,CAEA,MAAO,SAAUX,CAAAA,qBAAV,0LAIOY,aAJP,CAIuBH,SAAS,CAACI,UAAV,CAAqB,aAArB,CAJvB,iBAKkB,MAAMD,CAAAA,aAAa,CAACE,GAAd,EAAN,CALlB,OAKOC,QALP,+BAOsB,MAAMV,CAAAA,IAAI,CAACG,8BAAD,CAAiCO,QAAjC,CAAV,CAPtB,OAOOC,aAPP,gCAQC,MAAMZ,CAAAA,GAAG,CAACO,uBAAuB,CAACK,aAAD,CAAxB,CAAT,CARD,0GAWC,MAAMZ,CAAAA,GAAG,CAACM,uBAAuB,aAAxB,CAAT,CAXD,qEAeP,MAAO,SAAUT,CAAAA,qBAAV,qJACH,MAAME,CAAAA,SAAS,CAAE;AACbI,eAAe,CAACU,uBADL,CAEXjB,qBAFW,CAAf,CADG,wDAOP,MAAO,SAAUE,CAAAA,SAAV,yIACH,MAAMI,CAAAA,GAAG,CAAC,CACND,IAAI,CAACJ,qBAAD,CADE,CAAD,CAAT,CADG","sourcesContent":["import { takeEvery, put, call, all } from 'redux-saga/effects'\nimport ShopActionTypes from \"./shop.types\";\nimport {convertCollectionSnapshotToMap, firestore} from \"../../firebase/firebase.utils\";\nimport {fetchCollectionsFailure, fetchCollectionsSuccess} from \"./shop.actions\";\n\nexport function* fetchCollectionsAsync() { //using generator function //this replaces fetchCollectionsStartAsync function in shop.actions\n    // yield console.log('I am fired')\n    //this is similar to Async await function\n    try{\n        const collectionRef = firestore.collection('collections');\n        const snapShot = yield collectionRef.get();\n       // const collectionMap = convertCollectionSnapshotToMap(snapShot); //we can do it like this\n        const collectionMap =yield call(convertCollectionSnapshotToMap, snapShot);//but this way with yield and call, redux can cancel our request if we want, we can use takeLatest to only use action that fired latest// and call function is for informing redux-saga that the function inside of it is to run and it is a function\n        yield put(fetchCollectionsSuccess(collectionMap)); //put is exactly like dispatch in redux-thunk //inside the brackets go actions\n\n    }catch (errorMessage) {\n        yield put(fetchCollectionsFailure(errorMessage))\n    }\n}\n\nexport function* fetchCollectionsStart() { //this function is for using in redux store // to use in redux component, we write redux actions with the same action type specified here, names doesn't necessarily need to match, only action types matters**// which we usually write in our actions file\n    yield takeEvery( //takeEvery use non-blocking calls // and if an action gets fired multiple times// this run every actions //but with takeLatest, it only run the latest action and cancels the first ones// it can cancel actions because of yields\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    )\n}\n\nexport function* shopSagas() {\n    yield all([\n        call(fetchCollectionsStart)\n    ])\n}\n\n"]},"metadata":{},"sourceType":"module"}